@using Microsoft.AspNetCore.Components.Web
@namespace BlazorApp2.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="BlazorApp2.styles.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script>
        window.editNotify=(id) => {
            if (!("Notification" in window)) {
                alert("This browser does not support desktop notification");
            } else if (Notification.permission === "granted") {
                const notification = new Notification("User edited");
            } else if (Notification.permission !== "denied") {
                Notification.requestPermission().then((permission) => {
                    if (permission === "granted") {
                        const notification = new Notification("User edited");
                    }
                });
            }
        };

        

        window.getOnlineState = () => {
            if (navigator.onLine) {
                return "online";
            } else {
                return "offline";
            }

        };

        window.getUSB = () => {
            navigator.usb.getDevices()
                .then((devices) => {
                    console.log(`Total devices: ${devices.length}`);
                    alert(`Total devices: ${devices.length}`)
                    devices.forEach((device) => {
                        console.log(`Product name: ${device.productName}, serial number ${device.serialNumber}`);
                        alert(`Product name: ${device.productName}, serial number ${device.serialNumber}`)
                    });
                });
        }

    </script>
</body>
</html>
